[{"/Users/tantiv4/employee/san/test/react-ts-todo/src/App.tsx":"1","/Users/tantiv4/employee/san/test/react-ts-todo/src/reportWebVitals.ts":"2"},{"size":3395,"mtime":1610700245834,"results":"3","hashOfConfig":"4"},{"size":425,"mtime":1610685051221,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1z4arm",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tantiv4/employee/san/test/react-ts-todo/src/App.tsx",["11"],"import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DeleteIcon from './assets/delete.png';\ninterface IToDos {\n\tid: string;\n\ttask?: string;\n\tcomplete: boolean;\n}\n\ninterface ReactAction {\n\tid: string;\n\ttype: 'DO_TODO' | 'UNDO_TODO' | 'CREATE_TODO' | 'DELETE_TODO';\n\ttask?: string;\n}\n\nfunction getInitialState(stateField: string): IToDos[] {\n\tconst value = localStorage.getItem(stateField);\n\tif (typeof value === 'string') {\n\t\treturn JSON.parse(value);\n\t}\n\treturn [];\n}\n\nconst initialTodos: IToDos[] = getInitialState('my-state');\n\nconst todoReducer = (state: IToDos[] = initialTodos, action: ReactAction): IToDos[] => {\n\tswitch (action.type) {\n\t\tcase 'DO_TODO':\n\t\t\treturn state.map((todo) => {\n\t\t\t\tif (todo.id === action.id) {\n\t\t\t\t\treturn { ...todo, complete: true };\n\t\t\t\t} else {\n\t\t\t\t\treturn todo;\n\t\t\t\t}\n\t\t\t});\n\t\tcase 'UNDO_TODO':\n\t\t\treturn state.map((todo) => {\n\t\t\t\tif (todo.id === action.id) {\n\t\t\t\t\treturn { ...todo, complete: false };\n\t\t\t\t} else {\n\t\t\t\t\treturn todo;\n\t\t\t\t}\n\t\t\t});\n\t\tcase 'CREATE_TODO':\n\t\t\treturn [\n\t\t\t\t...state,\n\t\t\t\t{\n\t\t\t\t\tid: action.id,\n\t\t\t\t\tcomplete: false,\n\t\t\t\t\ttask: action.task,\n\t\t\t\t},\n\t\t\t];\n\t\tcase 'DELETE_TODO':\n\t\t\treturn state.filter((el) => {\n\t\t\t\treturn el.id !== action.id;\n\t\t\t});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\ninterface ICreateToDo {\n\tcreateNewTodo: (task: string) => void;\n}\n\nfunction CreateTodo({ createNewTodo }: ICreateToDo) {\n\tconst [todo, setTodo] = useState('');\n\tconst createTodoTo = function (e: React.FormEvent<HTMLFormElement>) {\n\t\te.preventDefault();\n\t\tcreateNewTodo(todo);\n\t\tsetTodo('');\n\t};\n\treturn (\n\t\t<form className={'new-todo-container'} onSubmit={createTodoTo}>\n\t\t\t<input\n\t\t\t\ttype={'text'}\n\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\tsetTodo(e.target.value);\n\t\t\t\t}}\n\t\t\t\tvalue={todo}\n\t\t\t\tplaceholder={'New Task'}\n\t\t\t/>\n\t\t\t<button>Create Task</button>\n\t\t</form>\n\t);\n}\nconst withLocalStorageCache = (reducer: (state: IToDos[] | undefined, action: ReactAction) => IToDos[]) => {\n\treturn (state: IToDos[], action: ReactAction) => {\n\t\tconst newState = reducer(state, action);\n\t\tlocalStorage.setItem('my-state', JSON.stringify(newState));\n\t\treturn newState;\n\t};\n};\n\nfunction App() {\n\tconst [todos, dispatch] = React.useReducer(withLocalStorageCache(todoReducer), initialTodos);\n\n\tconsole.log(todos);\n\tconst createNewTodo = function (task: string): void {\n\t\tdispatch({ type: 'CREATE_TODO', task, id: Date.now() + '' });\n\t};\n\n\tconst deleteTodo = (id: string) => (e: React.MouseEvent<HTMLElement>) => {\n\t\te.stopPropagation();\n\t\tconsole.log('sass');\n\t\tdispatch({ type: 'DELETE_TODO', id });\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>MY TODOS</h1>\n\t\t\t\t{todos.map((el: IToDos, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tdispatch({ type: !el.complete ? 'DO_TODO' : 'UNDO_TODO', id: el.id });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName={el.complete ? 'each-todo completed' : 'each-todo'}\n\t\t\t\t\t\t\tkey={el.id}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{el.task}\n\t\t\t\t\t\t\t<span className={'completed-text'}>\n\t\t\t\t\t\t\t\t{el.complete ? (\n\t\t\t\t\t\t\t\t\t'completed'\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tonClick={deleteTodo(el.id)}\n\t\t\t\t\t\t\t\t\t\tsrc={DeleteIcon}\n\t\t\t\t\t\t\t\t\t\tclassName={'delete-icon'}\n\t\t\t\t\t\t\t\t\t\talt={'delete'}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<CreateTodo createNewTodo={createNewTodo} />\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/Users/tantiv4/employee/san/test/react-ts-todo/src/reportWebVitals.ts",[],{"ruleId":"12","severity":1,"message":"13","line":2,"column":8,"nodeType":"14","messageId":"15","endLine":2,"endColumn":12},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]